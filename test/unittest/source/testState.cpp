#include "testState.h"


namespace test
{
////////////////////////////////////////////////////////////////////////////////
State::State(int id)
  : fsm::state_base<test::EventBase>(id)
  , mon_enteringCalls(0)
  , mon_exitingCalls(0)
{
}
////////////////////////////////////////////////////////////////////////////////
void State::on_entering()
{
    ++mon_enteringCalls;
}
////////////////////////////////////////////////////////////////////////////////
void State::on_exiting()
{
    ++mon_exitingCalls;
}
////////////////////////////////////////////////////////////////////////////////
void State::on_event(test::EventBase const & event)
{
    event.forwardDataToState(*this);
}
////////////////////////////////////////////////////////////////////////////////
void State::on_eventBase(int value)
{
    mEvents.push_back(value);
}
////////////////////////////////////////////////////////////////////////////////
bool State::wason_enteringCalled() const
{
    return (mon_enteringCalls > 0);
}
////////////////////////////////////////////////////////////////////////////////
bool State::wason_exitingCalled() const
{
    return (mon_exitingCalls > 0);
}
////////////////////////////////////////////////////////////////////////////////
bool State::wason_eventCalled() const
{
    return !mEvents.empty();
}
////////////////////////////////////////////////////////////////////////////////
int State::geton_enteringCallCount() const
{
    return mon_enteringCalls;
}
////////////////////////////////////////////////////////////////////////////////
int State::geton_exitingCallCount() const
{
    return mon_exitingCalls;
}
////////////////////////////////////////////////////////////////////////////////
State::events_t const & State::getEvents() const
{
    return mEvents;
}
////////////////////////////////////////////////////////////////////////////////
void State::reset()
{
    mon_enteringCalls = 0;
    mon_exitingCalls = 0;
    mEvents.clear();
}
////////////////////////////////////////////////////////////////////////////////
}
