#include "testState.h"


namespace test
{
////////////////////////////////////////////////////////////////////////////////
State::State(int id)
  : fsm::state_base<test::EventBase>(id)
  , mOnEnteringCalls(0)
  , mOnExitingCalls(0)
{
}
////////////////////////////////////////////////////////////////////////////////
void State::onEntering()
{
    ++mOnEnteringCalls;
}
////////////////////////////////////////////////////////////////////////////////
void State::onExiting()
{
    ++mOnExitingCalls;
}
////////////////////////////////////////////////////////////////////////////////
void State::onEvent(test::EventBase const & event)
{
    event.forwardDataToState(*this);
}
////////////////////////////////////////////////////////////////////////////////
void State::onEventBase(int value)
{
    mEvents.push_back(value);
}
////////////////////////////////////////////////////////////////////////////////
bool State::wasOnEnteringCalled() const
{
    return (mOnEnteringCalls > 0);
}
////////////////////////////////////////////////////////////////////////////////
bool State::wasOnExitingCalled() const
{
    return (mOnExitingCalls > 0);
}
////////////////////////////////////////////////////////////////////////////////
bool State::wasOnEventCalled() const
{
    return !mEvents.empty();
}
////////////////////////////////////////////////////////////////////////////////
int State::getOnEnteringCallCount() const
{
    return mOnEnteringCalls;
}
////////////////////////////////////////////////////////////////////////////////
int State::getOnExitingCallCount() const
{
    return mOnExitingCalls;
}
////////////////////////////////////////////////////////////////////////////////
State::events_t const & State::getEvents() const
{
    return mEvents;
}
////////////////////////////////////////////////////////////////////////////////
void State::reset()
{
    mOnEnteringCalls = 0;
    mOnExitingCalls = 0;
    mEvents.clear();
}
////////////////////////////////////////////////////////////////////////////////
}
