#include "testState.h"


namespace test
{
////////////////////////////////////////////////////////////////////////////////
State::State(int id)
  : fsm::state_machine<test::EventBase, int>::state_base(id)
  , m_on_entering_calls(0)
  , m_on_exiting_calls(0)
{
}
////////////////////////////////////////////////////////////////////////////////
void State::on_entering()
{
    ++m_on_entering_calls;
}
////////////////////////////////////////////////////////////////////////////////
void State::on_exiting()
{
    ++m_on_exiting_calls;
}
////////////////////////////////////////////////////////////////////////////////
void State::on_event(test::EventBase const & event)
{
    event.forward_data_to_state(*this);
}
////////////////////////////////////////////////////////////////////////////////
void State::on_event_base(int value)
{
    m_events.push_back(value);
}
////////////////////////////////////////////////////////////////////////////////
bool State::was_on_entering_called() const
{
    return (m_on_entering_calls > 0);
}
////////////////////////////////////////////////////////////////////////////////
bool State::was_on_exiting_called() const
{
    return (m_on_exiting_calls > 0);
}
////////////////////////////////////////////////////////////////////////////////
bool State::was_on_event_called() const
{
    return !m_events.empty();
}
////////////////////////////////////////////////////////////////////////////////
int State::get_on_entering_call_count() const
{
    return m_on_entering_calls;
}
////////////////////////////////////////////////////////////////////////////////
int State::get_on_exiting_call_count() const
{
    return m_on_exiting_calls;
}
////////////////////////////////////////////////////////////////////////////////
State::events_t const & State::get_events() const
{
    return m_events;
}
////////////////////////////////////////////////////////////////////////////////
void State::reset()
{
    m_on_entering_calls = 0;
    m_on_exiting_calls = 0;
    m_events.clear();
}
////////////////////////////////////////////////////////////////////////////////
}
