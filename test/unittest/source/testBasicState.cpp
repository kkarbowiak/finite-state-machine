#include "testBasicState.h"


namespace test
{
////////////////////////////////////////////////////////////////////////////////
BasicState::BasicState(int id)
  : fsm::state_base_basic<test::Event>(id)
  , mon_enteringCalls(0)
  , mon_exitingCalls(0)
{
}
////////////////////////////////////////////////////////////////////////////////
void BasicState::on_entering()
{
    ++mon_enteringCalls;
}
////////////////////////////////////////////////////////////////////////////////
void BasicState::on_exiting()
{
    ++mon_exitingCalls;
}
////////////////////////////////////////////////////////////////////////////////
void BasicState::on_event(test::Event const & event)
{
    mEvents.push_back(event);
}
////////////////////////////////////////////////////////////////////////////////
bool BasicState::wason_enteringCalled() const
{
    return (mon_enteringCalls > 0);
}
////////////////////////////////////////////////////////////////////////////////
bool BasicState::wason_exitingCalled() const
{
    return (mon_exitingCalls > 0);
}
////////////////////////////////////////////////////////////////////////////////
bool BasicState::wason_eventCalled() const
{
    return !mEvents.empty();
}
////////////////////////////////////////////////////////////////////////////////
int BasicState::geton_enteringCallCount() const
{
    return mon_enteringCalls;
}
////////////////////////////////////////////////////////////////////////////////
int BasicState::geton_exitingCallCount() const
{
    return mon_exitingCalls;
}
////////////////////////////////////////////////////////////////////////////////
BasicState::events_t const & BasicState::getEvents() const
{
    return mEvents;
}
////////////////////////////////////////////////////////////////////////////////
void BasicState::reset()
{
    mon_enteringCalls = 0;
    mon_exitingCalls = 0;
    mEvents.clear();
}
////////////////////////////////////////////////////////////////////////////////
}
