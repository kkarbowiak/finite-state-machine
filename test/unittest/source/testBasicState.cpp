#include "testBasicState.h"


namespace test
{
////////////////////////////////////////////////////////////////////////////////
BasicState::BasicState(int id)
  : fsm::StateBaseBasic<test::Event>(id)
  , mOnEnteringCalls(0)
  , mOnExitingCalls(0)
{
}
////////////////////////////////////////////////////////////////////////////////
void BasicState::onEntering()
{
    ++mOnEnteringCalls;
}
////////////////////////////////////////////////////////////////////////////////
void BasicState::onExiting()
{
    ++mOnExitingCalls;
}
////////////////////////////////////////////////////////////////////////////////
void BasicState::onEvent(test::Event const & event)
{
    mEvents.push_back(event);
}
////////////////////////////////////////////////////////////////////////////////
bool BasicState::wasOnEnteringCalled() const
{
    return (mOnEnteringCalls > 0);
}
////////////////////////////////////////////////////////////////////////////////
bool BasicState::wasOnExitingCalled() const
{
    return (mOnExitingCalls > 0);
}
////////////////////////////////////////////////////////////////////////////////
bool BasicState::wasOnEventCalled() const
{
    return !mEvents.empty();
}
////////////////////////////////////////////////////////////////////////////////
int BasicState::getOnEnteringCallCount() const
{
    return mOnEnteringCalls;
}
////////////////////////////////////////////////////////////////////////////////
int BasicState::getOnExitingCallCount() const
{
    return mOnExitingCalls;
}
////////////////////////////////////////////////////////////////////////////////
BasicState::events_t const & BasicState::getEvents() const
{
    return mEvents;
}
////////////////////////////////////////////////////////////////////////////////
void BasicState::reset()
{
    mOnEnteringCalls = 0;
    mOnExitingCalls = 0;
    mEvents.clear();
}
////////////////////////////////////////////////////////////////////////////////
}
